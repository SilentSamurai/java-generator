
package ${USER_SPRING_PACKAGE}.controllers;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

import ${USER_SPRING_PACKAGE}.utils.CommonUtil;
import ${USER_SPRING_PACKAGE}.dtos.ResponseBuilder;
import ${USER_SPRING_PACKAGE}.entities.${ENTITY_NAME};
import ${USER_SPRING_PACKAGE}.services.${SERVICE_CLASS};
import ${USER_SPRING_PACKAGE}.dtos.request.${JOB_REQUEST_CLASS};
import ${USER_SPRING_PACKAGE}.dtos.response.${LIGHT_RESPONSE_CLASS};
import ${USER_SPRING_PACKAGE}.dtos.response.${LIGHT_RESPONSE_CLASS};

@RestController
@RequestMapping("${PRE_FIX_URL}")
public class ${ControllerName} {
    Logger logger = LoggerFactory.getLogger(${ControllerName}.class);

    @Autowired
    private ${SERVICE_CLASS} ${SERVICE_INSTANCE};

    @GetMapping(value = "/${API_NAME}")
    public ResponseEntity<?> index() {
        try {
            // TODO COMPLETE ${ENTITY_NAME} INDEX API
            List<${ENTITY_NAME}> ${ENTITY_INSTANCE_NAME_PLURAL} = ${SERVICE_INSTANCE}.findAll();
            ${LIGHT_RESPONSE_CLASS} ${LIGHT_RESPONSE_INSTANCE} = CommonUtil.mapModels(${ENTITY_INSTANCE_NAME_PLURAL}, ${LIGHT_RESPONSE_CLASS}.class);
            return ResponseBuilder.ok(${LIGHT_RESPONSE_INSTANCE});
        } catch (RuntimeException e) {
            e.printStackTrace();
            return ResponseBuilder.internalServerError(e.getMessage());
        }
    }

    @GetMapping(value = "/${API_NAME}/{id}")
    public ResponseEntity<?> show(@PathVariable String id) {
        try {
            // TODO COMPLETE ${ENTITY_NAME} SHOW API
            ${ENTITY_NAME} ${ENTITY_INSTANCE_NAME} = ${SERVICE_INSTANCE}.findById(id);
            ${LIGHT_RESPONSE_CLASS} ${LIGHT_RESPONSE_INSTANCE} = CommonUtil.mapModel(${ENTITY_INSTANCE_NAME}, ${LIGHT_RESPONSE_CLASS}.class);
            return ResponseBuilder.ok(${LIGHT_RESPONSE_INSTANCE});
        } catch (RuntimeException e) {
            e.printStackTrace();
            return ResponseBuilder.internalServerError(e.getMessage());
        }
    }

    @PostMapping(value = "/${API_NAME}")
    public ResponseEntity<?> create(@Valid @RequestBody ${JOB_REQUEST_CLASS} ${JOB_REQUEST_INSTANCE}) {
        try {
            // TODO COMPLETE ${ENTITY_NAME} CREATE API
            ${ENTITY_NAME} ${ENTITY_INSTANCE_NAME} = CommonUtil.mapModel(${JOB_REQUEST_INSTANCE}, ${ENTITY_NAME}.class);
            ${SERVICE_INSTANCE}.save(${ENTITY_INSTANCE_NAME});
            return ResponseBuilder.created(${ENTITY_INSTANCE_NAME});
        } catch (RuntimeException e) {
            e.printStackTrace();
            return ResponseBuilder.internalServerError(e.getMessage());
        }
    }

    @PutMapping(value = "/${API_NAME}/{id}")
    public ResponseEntity<?> update(@Valid @RequestBody ${JOB_REQUEST_CLASS} ${JOB_REQUEST_INSTANCE}, @PathVariable String id) {
        try {
            // TODO COMPLETE ${ENTITY_NAME} UPDATE API
            ${ENTITY_NAME} ${ENTITY_INSTANCE_NAME} = ${SERVICE_INSTANCE}.findById(id);
            CommonUtil.mapModel(${ENTITY_INSTANCE_NAME}, ${JOB_REQUEST_INSTANCE});
            ${SERVICE_INSTANCE}.save(${ENTITY_INSTANCE_NAME});
            return ResponseBuilder.ok(${ENTITY_INSTANCE_NAME});
        } catch (RuntimeException e) {
            e.printStackTrace();
            return ResponseBuilder.internalServerError(e.getMessage());
        }
    }

    @DeleteMapping(value = "/${API_NAME}/{id}")
    public ResponseEntity<?> delete(@PathVariable String id) {
        try {
            // TODO COMPLETE ${ENTITY_NAME} DELETE API
            ${ENTITY_NAME} ${ENTITY_INSTANCE_NAME} = ${SERVICE_INSTANCE}.findById(id);
            ${SERVICE_INSTANCE}.deleteById(id);
            return ResponseBuilder.ok(${ENTITY_INSTANCE_NAME});
        } catch (RuntimeException e) {
            e.printStackTrace();
            return ResponseBuilder.internalServerError(e.getMessage());
        }
    }

}
